// TODO: Set and use CSS-vars in stead of SCSS-vars

@mixin focusRing {
  box-shadow: 0 0 0 16px hsla(var(--g-controlAccentColor--hsl), 0);

  &:focus {
    transition: 0.25s box-shadow cubic-bezier(0.61, 1, 0.88, 1);
    transition-delay: 0.125s;
    box-shadow: 0 0 0 0.35rem hsla(var(--g-controlAccentColor--hsl), 0.5);
  }
}

.rli-noteList {
  --notelist--Background: var(--g-primary-Background);
  --notelist--item--Line-height: 3.6rem;

  > div:first-child {
    border-right: 1px solid var(--g-gridColor);
  }

  > div > div {
    background-color: var(--notelist--Background);

    // overwrite background-color behind search bar
    > div:first-child {
      background-color: transparent;
      height: auto;
      width: 100%;
    }

    div:nth-child(2) > div {
      background-color: transparent !important;
    }
  }

  .search-bar {
    input[type='text'] {
      @include focusRing;

      border: 1px solid var(--g-separatorColor);
      background: var(--g-controlBackgroundColor);
      border-radius: 0.6rem;
      color: var(--g-controlTextColor);
      font-size: 1.3rem;
      height: 2.8rem;
      max-height: none;
      padding: 0 2.5rem 0 3rem !important;
      width: 100%;
      flex: 1 0 100%;

      &::placeholder {
        color: var(--g-tertiaryLabelColor);
      }
    }

    // search button
    input[type='text'] + button {
      flex: 0;
      position: unset;
      padding: 0;
      right: auto;
      top: 1px;

      // always show magnifying glass
      span::before {
        content: var(--s-icon-magnifyingglass) !important;
        font-family: var(--g-font-family-icons);
        position: absolute;
        left: 0;
        color: var(--g-secondaryLabelColor);
        font-size: 1.6rem;
        font-weight: normal !important;
        top: 0.5rem;
        left: 0.8rem;
        pointer-events: none;
      }
    }

    // cross when input value !== empty
    .fa-times {
      font-size: 13px;
      font-weight: normal;

      &::after {
        color: var(--g-secondaryLabelColor);
        content: var(--g-icon-xmark-circle-fill);
        font-family: var(--s-font-family-icons);
        display: block;
        font-family: var(--g-font-family-system) !important;
        position: absolute;
        right: 0.7rem;
        top: 0.7rem;
      }
    }

    // 'add'-buttons next to search
    + div {
      position: relative;
      overflow: hidden;
      width: auto;
      max-height: 2.8rem;
      flex: 1 0 auto;

      button {
        background: none;
        border-radius: 0.6rem;
        margin-left: 0.6rem;
        max-height: none;
        max-width: none;
        height: 2.6rem;
        width: 2.6rem;

        + button {
          margin-left: 0.1rem;
        }

        &:focus,
        &:hover {
          background: var(--g-quaternaryLabelColor);
        }

        span:before {
          color: var(--g-secondaryLabelColor);
          display: block;
          font-family: var(--g-font-family-icons);
          font-size: var(--g-font-size-2);
          font-weight: 500;
          -webkit-font-smoothing: antialiased;
          transform: translateY(0.05rem);
        }

        &.new-todo-button span:before {
          content: var(--s-icon-checkmark-circle) !important;
        }

        &.new-note-button span:before {
          content: var(--s-icon-square-and-pencil);
        }
      }
    }
  }

  // note list + items
  .note-list {
    padding: 0 1rem 1rem;

    // cover up last border in notelist (workaround, since we can't target the last-child due to an extra (empty) element
    > div:last-child:empty {
      height: 0.1rem !important;
      background: var(--notelist--Background);
      position: absolute;
      margin-top: -0.1rem;
      left: 0;
      right: 0;
    }
  }

  .todo-list-item,
  .note-list-item {
    border-radius: 0.4rem;
    height: auto;
    line-height: var(--notelist--item--Line-height);

    // remove divider
    &.odd::before,
    &.even::before {
      content: var(--u-note-list-dividers, '');
    }

    &.odd {
      background: var(
        --u-note-list-zebra-color-odd,
        var(--g-alternatingContentBackgroundColorsOdd)
      );
    }
    &.even {
      background: var(
        --u-note-list-zebra-color-even,
        var(--g-alternatingContentBackgroundColorsEven)
      );
    }

    a {
      padding: 0 1rem !important;
      font-size: 1.2rem !important;
      // color: var(--g-textColor) !important;
      color: var(--g-labelColor) !important;
    }

    .fa-share-square {
      order: 1;
      margin-left: auto;
      &::before {
        content: var(--g-icon-arrow-up-right-square-fill);
        font-family: var(--s-font-family-icons);
        color: var(--s-accentColor);
        font-weight: 400;
        font-family: var(--g-font-family-system);
      }
    }

    mark {
      background: var(--g-systemYellow);
      color: var(--g-shadowColor) !important;
      border-radius: 0.2rem;
    }

    &.selected {
      background: var(--s-accentColor--selected) !important;

      a,
      span {
        color: var(--g-alternateSelectedControlTextColor) !important;
      }

      // search highlight
      mark {
        background: var(--g-systemYellow);
        color: var(--g-shadowColor) !important;
      }

      &:before {
        top: -1px;
        bottom: auto;
        border-color: var(--notelist--Background);
      }

      .fa-share-square::before {
        color: var(--g-alternateSelectedControlTextColor);
      }

      + .selected {
        border-top-left-radius: 0;
        border-top-right-radius: 0;
        // a hack for removing the rounded corners in between items when having multiple items selected
        margin-top: -0.4rem;
        padding-top: 0.4rem;

        &:before {
          border-color: transparent;
        }

        &:after {
          content: '';
          background-color: var(--g-separatorColor);
          position: absolute;
          height: 0.1rem;
          top: 0.4rem;
          left: 1rem;
          right: 1rem;
        }
      }

      &:first-of-type {
        border-top-left-radius: 0.4rem;
        border-top-right-radius: 0.4rem;
      }
      &:last-of-type {
        border-bottom-right-radius: 0.4rem;
        border-bottom-right-radius: 0.4rem;
      }
    }

    &::before {
      border-color: var(--g-separatorColor);
      left: 10px;
      right: 0px;
      width: auto;
    }

    > a > span {
      overflow: hidden;
      text-overflow: ellipsis;
      color: inherit;
    }
  }

  .todo-list-item {
    > div {
      padding-left: 1rem !important;
    }

    input {
      border: 0.1rem solid var(--g-tertiaryLabelColor);
      margin: 0 -0.3rem -0.2rem 0 !important;
      border-radius: 50%;
      appearance: none;
      height: 1.5rem;
      width: 1.5rem;
      position: relative;

      &:checked {
        background-color: var(--s-controlAccentColor);
        border-color: transparent;

        &:after {
          content: var(--s-icon-checkmark);
          position: absolute;
          font-family: var(--s-font-family-icons) !important;
          color: var(--g-alternateSelectedControlTextColor);
          left: 0.15rem;
          top: 0.1rem;
          font-size: 0.9rem;
        }
      }
    }

    &.selected input {
      border-color: hsla(var(--g-controlColor--hsl), 0.5);

      &:checked {
        border-color: transparent;
        background-color: rgba(
          var(--g-alternateSelectedControlTextColor--rgb),
          0.898
        );

        &:after {
          color: var(--s-accentColor);
        }
      }
    }
  }

  > div > div > div:last-child {
    background-color: transparent !important;
  }

  // fix: remove obsolete border
  > div > div > div:last-child {
    border-right: none;
  }
}
